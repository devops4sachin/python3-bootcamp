1) Write a function called "decrement_list" that accepts a single list of numbers as a parameter. It should return a copy of the list
where each item has been decremented by one. Use map to do this.
## decrement_list([1,2,3])      #[0,1,2]
## decrement_list([20,14,11])   #[19,13,10]

def decrement_list(l):
    return list(map(lambda n: n-1, l))



2) Write a function "remove_negatives" that accepts a list of nums and returns a copy of the lists with all negative numbers removed.
Use filter() in your implementation. Remember filter does not return a list! Convert the result to a list yourself.


def remove_negatives(list1):
    return list(filter(lambda x: x>=0, list1))


3) Implement a function "is_all_string" that accepts a single iterable and returns "True" if it contains ONLY strings. Otherwise False.

# Implement your is_all_strings function below:
def is_all_strings(liststr):
    return all([type(char)==str for char in liststr])


4) A function that "return a tuple" containing the min and max elements.

# Define extremes below:
def extremes(iterable):
    return (min(iterable), max(iterable))



5) A function which return the magnitude of the number with the largest magnitude(the number furthest away from zero).

def max_magnitude(listnum):
    return (max(abs(num) for num in listnum))



6) A function that accepts a variable number of arguments and returns the sum of all the arguments that are divisible by 2.

'''
sum_even_values(1,2,3,4,5,6) # 12
sum_even_values(4,2,1,10) # 16
sum_even_values(1) # 0
'''

# define sum_even_values
def sum_even_values(*args):
    return (sum(num for num in args if num%2==0))



7) A function that accepts a variable number of arguments and return sum of all the parameters that are floats, if no float return 0.

'''
sum_floats(1.5, 2.4, 'awesome', [], 1) # 3.9
sum_floats(1,2,3,4,5) # 0
'''

def sum_floats(*args):
    return (sum(num for num in args if type(num)==float))



8) Write a function for following.
interleave('hi','ha')       # 'hhia'
interleave('aaa','zzz')     # 'azazaz'
interleave('lzr','iad')     # 'lizard'

def interleave(str1, str2):
    return "".join("".join(x)for x in zip(str1, str2))



9) Triple and filter : Function should accept a list of numbers, filter out every numbers that is divisible by 4 and return a new list
where every remaining number is tripled.

'''
triple_and_filter([1,2,3,4]) # [12]
triple_and_filter([6,8,10,12]) # [24,36]
'''

def triple_and_filter(listnum):
    return list(map(lambda x:x*3, (num for num in listnum if num%4==0)))



10) A function should accept a list of dictionaries and return a new list of strings with the first and last name keys in each 
dictionary concatenated.

'''
names = [{'first': 'Elie', 'last': 'Schoppik'}, {'first': 'Colt', 'last': 'Steele'}]
extract_full_name(names) # ['Elie Schoppik', 'Colt Steele']
'''

def extract_full_name(liststr):
    return list(map(lambda val: "{} {}".format(val['first'], val['last']), liststr))
