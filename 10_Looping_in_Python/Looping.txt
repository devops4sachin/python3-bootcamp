- for loops :

        for item in iterable_object:
            # do something with item

    - An "iterable object" is some kind of collection of items, for instance: a list of numbers, a string of characters, a range, etc.
    - "item" references the current position of our "iterator" within the iterable. It will iterate over (run through) every item of the collection and then go away when it has visited all items

    - for loop with ranges

        for number in range(1, 8):
            print(number)


- ranges :

    range(7) gives you integers from 0 thru 6 ( shown)
        - Count starts at 0 and is exclusive
    range(1, 8) will give you integers from 1 to 7
        - Two parameters are (start, end)
    range(1, 10, 2)  will give you odds from 1 to 10
        - Third param is called the "step", meaning how many to skip. Also, which way to count, up + or down -
    range(7, 0, -1)  will give you integers from 7 to 1


- while loops :
    - while loops continue to execute while a certain condition is truthy, and will end when they become falsy.

        user_response = None
        while user_response != "please":
            user_response = input("Ah ah ah, you didn't say the magic word: ")


- Controlled Exit :
    - The keyword break gives us the ability to exit out of while loops whenever we want:
        
        while True:
            command = input("Type 'exit' to exit: ")
            if (command == "exit"):
                break

    - We can also use it to end for loops early:

        for x in range(1, 101):
            print(x)
            if x == 3:
                break

