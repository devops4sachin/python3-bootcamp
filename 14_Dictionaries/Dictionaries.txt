############################# 14 Dictionaries #################################

####### 1: Introduction

	- Limitations of Lists : Not enough information!, We want to describe this data in more detail!
	
		instructor = ["Colt", True, 4, "Python", False]
		
	
	- Dictionaries : A data structure that consists of key value pairs. We use the keys to describe our data and the values to represent the data.
	
		- example :
			instructor = {
				"name": "Colt",
				"owns_dog": True,
				"num_courses": 4,
				"favorite_language": "Python",
				"is_hilarious": False,
				44: "my favorite number!"
			}
		
		- Our keys are almost always numbers or strings, Our values can be anything!, it could be a dictionary as well.
		
		- Another Way : Another approach is to use the dict function. You assign values to keys by passing in keys and values separated by an =

			another_dictionary = dict(key = 'value')
			another_dictionary # {'key': 'value'}


			
######## 2 : Accessing Data in Dictionaries			

	- Accessing Individual Values

		instructor = {
			"name": "Colt",
			"owns_dog": True,
			"num_courses": 4,
			"favorite_language": "Python",
			"is_hilarious": False,
			44: "my favorite number!"
		}
		
		
		instructor["name"] # "Colt"
		
		instructor["thing"] # KeyError

	- Accessing All Values in a Dictionary
	

	
	
######## 3 : Iterating Dictionaries

	- Accessing all values : Use .values()
	
			instructor = {
				"name": "Colt",
				"owns_dog": True,
				"num_courses": 4,
				"favorite_language": "Python",
				"is_hilarious": False,
				44: "my favorite number!"
			}
			
			for value in instructor.values():
				print(value)
			
			# "Colt"
			# True
			# 4
			# "Python"
			# False
			# "my favorite number!"	
 
 
	- Accessing all Keys : Use .keys()
	
			for key in instructor.keys():
				print(key)
			
			# name
			# owns_dog
			# num_courses
			# favorite_language
			# is_hilarious
			# 44
			
	
	- Accessing all Keys and Values : Use .items()
	
			for key,value in instructor.items():
				print(key,value)
			
			# name "Colt"
			# owns_dog True
			# num_courses 4
			# favorite_language "Python"
			# is_hilarious False
			# 44 "my favorite number!"
			
			
			
			

######## 4 : Using In With Dictionaries

			instructor = {
				"name": "Colt",
				"owns_dog": True,
				"num_courses": 4,
				"favorite_language": "Python",
				"is_hilarious": False,
				44: "my favorite number!"
			}

		- Does a dictionary have a key?

			"name" in instructor # True
			"awesome" in instructor # False

		- Does a dictionary have a value?

			"Colt" in instructor.values() # True
			"Nope!" in instructor.values() # False
			
	

			
####### 5 : Dictionary Methods: Clear, Copy, Fromkeys, and Get

	- clear : Clears all the keys and values in a dictionary:
	
		d = dict(a=1,b=2,c=3)
		d.clear()
		d # {}
		
	- copy : Makes a copy of a dictionary
	
		d = dict(a=1,b=2,c=3)
		c = d.copy()
		c # {'a': 1, 'b': 2, 'c': 3}
		c is d # False	
		
	
	- fromkeys : Creates key-value pairs from comma separated values.
	
		{}.fromkeys("a","b") # {'a': 'b'}
		{}.fromkeys(["email"], 'unknown') 		# {'email': 'unknown'}
		{}.fromkeys("a",[1,2,3,4,5]) 			# {'a': [1, 2, 3, 4, 5]}
		>>> new_user = {}.fromkeys(['name','score','email'],'unknown')
		>>> new_user
		{'name': 'unknown', 'score': 'unknown', 'email': 'unknown'}
		
		
	- get : Retrieves a key in an object and return None instead of a KeyError if the key does not exist.
	
		d = dict(a=1,b=2,c=3)
		d['a'] # 1
		d.get('a') # 1
		d['b'] # 2
		d.get('b') # 2
		d['no_key'] # KeyError
		d.get('no_key') # None		-- used to check if present or not.
	
	
		>>> instructor = {
		...     "name": "Colt",
		...     "owns_dog": True,
		...     "num_courses": 4,
		...     "favorite_language": "Python",
		...     "is_hilarious": False,
		...     44: "my favorite number!"
		... }
		>>> result = instructor.get('email')
		>>> result
		>>> result is None
		True

			
		- example :
		
			game_properties = [
				"current_score",
				"high_score",
				"number_of_lives",
				"items_in_inventory",
				"power_ups",
				"ammo",
				"enemies_on_screen",
				"enemy_kills",
				"enemy_kill_streaks",
				"minutes_played",
				"notifications",
				"achievements"
			]
			initial_game_state = dict.fromkeys(game_properties, 0)	
			
	
	- pop : Takes a single argument corresponding to a key and removes that key-value pair from the dictionary. Returns the value corresponding to the key that was removed. 
	
		d = dict(a=1,b=2,c=3)
		d.pop() # TypeError: pop expected at least 1 arguments, got 0
		d.pop('a') # 1
		d # {'c': 3, 'b': 2}
		d.pop('e') # KeyError	
		
		
	- popitem : Removes a random key in a dictionary.
	
		d = dict(a=1,b=2,c=3,d=4,e=5)
		d.popitem() # ('d', 4)
		d.popitem('a') # TypeError: popitem() takes no arguments (1 given)	
		
	
	- update : Update keys and values in a dictionary with another set of key value pairs.
	
		first = dict(a=1,b=2,c=3,d=4,e=5)
		second = {}
		
		second.update(first)
		second # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
		
		# let's overwrite an existng key
		second['a'] = "AMAZING"
		
		second['a'] = "Amazing"
		second
		{'a': 'Amazing', 'b': 2, 'c': 3, 'd': 4, 'e': 5}
		
		# if we update again
		second.update(first) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
		
		# the update overrides our values
		second # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}	
		
		
		
####### 6 : Spotify Playlist Example

	- Data modelling using List and Dictionary.
	- Creating a playlist.
	
	- Refer to file "playlist.py"
	
	
	
####### 7 : Dictionary Comprehension

	- the syntax
		{ ____:____ for ___ in ____}
		
		- iterates over keys by default
		- to iterate over keys and values using .items()
		
	- example :
		numbers = dict(first=1, second=2, third=3)
		squared_numbers = {key: value ** 2 for key,value in numbers.items()}
		print(squared_numbers) # {'first': 1, 'second': 4, 'third': 9}

	- example :
		>>> {num: num*2 for num in [1,2,3,4,5]}
		{1: 2, 2: 4, 3: 6, 4: 8, 5: 10}

		
		str1 = "ABC"
		str2 = "123"
		combo = {str1[i]: str2[i] for i in range(0,len(str1))} 
		print(combo) # # {'A': '1', 'B': '2', 'C': '3'}
		
	- Conditional Login with Dictionary Comprehension.
	
		>>> num_list = [1,2,3,4]
		>>> {num:("even" if num % 2 == 0 else "odd") for num in num_list}
		{1: 'odd', 2: 'even', 3: 'odd', 4: 'even'}
		
		>>> instructor = {'name':'Sachin', 'city':'Pune', 'color':'Purple'}
		>>> yelling_instructor = {(k.upper() if k == 'color' else k): v.upper() for k,v in instructor.items()}
		>>> yelling_instructor
		{'name': 'SACHIN', 'city': 'PUNE', 'COLOR': 'PURPLE'}
		
		
	- example : 
	
	list1 = ["CA", "NJ", "RI"]
	list2 = ["California", "New Jersey", "Rhode Island"]
	answer = {list1[i]: list2[i] for i in range(0,3)}	
		
	
	